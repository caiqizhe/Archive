# Problem 1

1a. All other campus sites' applications do not touch the end user's login credentials and hence less exposures of user's credentials. This improves the security as traditional authentication architecture requires user's login credentials for each single individual application. The traditional decentralized authentication and authorization services have bigger attack surfaces compared to the centralized one. Also, centralized authentication and authorization service allows better logging and monitoring. In case of malicious activities, centralized monitoring system could initialize protocols immediately to prevent activities cause further damages to the system. A SSO is much easier to guard compared to a decentralized authentication systems.  

1b. The disadvantage of centralized approach is that if a user account is compromised, the attacker has access to any resources to which the user has access to. If the SSO goes out, the user would lose access to all sites. A centralized SSO has databases of users' credentials to access all other applications. This might make the SSO system a very high value target to attackers.    

1c. Since the attacker has the control over Site A, a JavaScript could be implemented or embedded in the HTML page to get user's username, u. Once, digital signature is received from SSO, attacker can reused the u, Sign(u) to browse other application. 

1d. To prevent the attack from the SSO server could return Sign(u||SiteX) where SiteX is the site that user wants to login. In this case, if the attacker tries to redirect or reuse the signature for other site, the verification process will fail.  

1e. Assume Mallory is able to observe the traffic, Mallory can send "Hello",n_1 to Bob and receive n_2, HMAC_k(n_1) from Bob. Mallory then send n_2, HMAC_k(n_1) to Alice to verify. And Alice will send HMAC_k(n_2) to Mallory. Mallory then sends this HMAC_k(n_2) received to Bob. And Bob will verify Mallory is a member of the group. Basically, replay attack.

1f.  

# Problem 2

2a. There are total 26 * 2 + 10 = 62 characters. This implies that worst case is 62^8 = 218,340,105,584,896 guesses. Then, the average case = 1/2 * worst case = 109,170,052,792,448 guesses. Then, given that attacker guesses 4,000,000 guesses/sec. Hence, on average it takes about 7581.25366 hours to crack a single password. 

2b. From the previous part, we have on average of 7582 hours to crack a single password. Then, we need to have at least 7582 botnet in order to crack individual hashes at an average rate of one per hour.

2c. sha256 output = 256 bits = 32 bytes. 8 characters = 8 bytes. For each pair we have 32 + 8 = 40 bytes. There're maximum 218,340,105,584,896 entries. Hence, total size = 218,340,105,584,896 * 40 = 62^8 * 40 bytes ~ 8734 TB.

2d. Given that the password set is N. Then we have N/k columns. Given that only the first and last password is stored and each password takes exactly 8 bytes. Hence, each columns takes 16 bytes. => (N/k)*16 bytes. 

2e. As given in part a, N = 218,340,105,584,896 passwords. Given that k = 5000. Then we have, 218,340,105,584,896/5000 * 16 bytes = 0.6987 TB.

2f. We have total N = 218,340,105,584,896. Given that the attacker can add 2 million chain elements per second. Then, N / 2,000,000 / (60*60) ~ 30,325.0147 hours

2g. If a lookup table is (hash-password pair) not computed, each crack will take roughly 7582 hours on average. If a lookup table is constructed as in (c) sorted by hash. The lookup will be O(log n) using binary search. However, it's almost not possible to compute a table of 8734 TB on average. The worst case, the storage space is much more than this. With a large botnet, divide and conqure will make the cracking feasible even without a lookup table. Compute table roughly the same time to search for password.

2h. Since the server_secret is a randomly generated 32-bit secret, it's nearly impossible to construct the rainbow table. In order for the rainbow table to work, a table of combination of all possible 4-bytes server_secret concatenated with password is needed to be pre-computed before constructing a rainbow table. This makes it more time-consuming to crack a large list of password and make it infeasible to use a rainbow attack.

2i. Since scenario states that the same scret is used for all passwords. A random 32bit secret could be generated for each password denoted by S. Then each password should be encrypted using SHA256( S || SHA256(password) ); The randomized salting would defend against rainbow table attack.

2j. The average case = 1/2 * worst case = 109,170,052,792,448 guesses. The machine now can computer 10^9 hashes per second @ 180GHz/sec => 109,170,052,792,448/(180*10^9)/(60*60) ~ 0.1685 hours.
